import click


class Tag:
    """A validated tag with display name generation.

    Tags are used to categorize and organize sessions. They must follow specific
    naming rules: contain only lowercase letters, digits, and hyphens, cannot
    start or end with hyphens, and must be at least 1 character long.

    The display name is automatically generated by replacing hyphens with spaces
    for better readability in user interfaces.

    Raises:
        ValueError: If the tag name doesn't meet validation requirements.

    Examples:
        >>> tag = Tag("machine-learning")
        >>> str(tag)  # Internal name
        'machine-learning'
        >>> repr(tag)  # Display name
        'machine learning'
    """

    def __init__(self, name: str, display_name: str | None = None):
        if Tag.validate_tag_name(name):
            self.name = name
        else:
            raise ValueError(f"Invalid tag: {name}")

        if display_name is None:
            self.display_name = Tag.make_display_name(name)
        else:
            self.display_name = display_name

    def __str__(self):
        return self.name

    def __repr__(self):
        return self.display_name

    @staticmethod
    def make_display_name(name: str) -> str:
        return " ".join(name.split("-"))

    @staticmethod
    def validate_tag_name(tag: str) -> bool:
        return (
            len(tag) >= 1
            and all(c.isdigit() or c == "-" or ("a" <= c <= "z") for c in tag)
            and tag[0] != "-"
            and tag[-1] != "-"
        )


class TagOption(click.ParamType):
    """Click parameter type for parsing comma-separated tag lists.

    Converts string input containing comma-separated tag names into a list of
    Tag objects. Input is automatically converted to lowercase and whitespace
    is stripped from individual tag names before validation.

    Supports both single tags and comma-separated lists:
    - "python" -> [Tag("python")]
    - "python,web-dev,api" -> [Tag("python"), Tag("web-dev"), Tag("api")]

    Raises:
        click.BadParameter: If any tag name fails validation through self.fail().

    Examples:
        Used in Click commands as:
        @click.option("-t", "--tag", type=TagOption())
    """

    name = "tag"

    def convert(
        self,
        value: str | list["Tag"],
        param: click.Parameter | None,
        ctx: click.Context | None,
    ) -> list["Tag"]:
        if isinstance(value, list):
            return value

        tags = []
        for tag in value.lower().split(","):
            tag = tag.strip()
            if not tag:  # Skip empty strings from comma separation
                continue
            try:
                tags.append(Tag(tag))
            except ValueError:
                self.fail(f"{tag} is not a valid tag", param, ctx)
        return tags
